###############################################################################
# Stage -- Publishing
###############################################################################

# When a tag is created matching the release pattern, build and publish our
# package to PYPI.
publish:
  extends: .shared-setup
  stage: publish
  script:
    # Ensure there is alignment with the tag reference and the reported
    # version of the package
    - |
      PACKAGE_VERSION="v$(poetry version -s)"
      if [[ "${CI_COMMIT_TAG}" != "${PACKAGE_VERSION}" ]]
      then
        echo "ERROR: Git tag reference and package version are NOT synonymous."
        echo "       Package version: ${PACKAGE_VERSION}"
        echo "       Git ref name   : ${CI_COMMIT_TAG}"
        exit 1
      fi
    # Ensure that we have token
    - |
      if [[ -z "${PYPI_PUBLISH_TOKEN}" ]]
      then
        echo "ERROR: Expected PYPI token variable was blank."
        echo "       Did you forget to set the appropriate PYPI_PUBLISH_TOKEN secret?"
        exit 1
      fi
    # Actually publish
    - |
      export POETRY_PYPI_TOKEN_PYPI="${PYPI_PUBLISH_TOKEN}"
      poetry publish --build
  rules:
    # If changes are pushed for a tag and the tag matching the release version
    # pattern. Also checking that the repository is the official upstream
    # source.
    - if: $CI_COMMIT_TAG =~ /^v\d+(\.\d+)*$/ && $CI_SERVER_HOST == "gitlab.jatic.net" && $CI_PROJECT_NAMESPACE == "jatic/kitware"
      when: on_success
    - when: never  # explicit fail-exclude terminal condition.