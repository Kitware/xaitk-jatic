# Use stages to define stages that contain groups of jobs. Use stage in a job
# to configure the job to run in a specific stage.
stages:
  - test

# Global default environment variables set for all jobs unless overridden by
# job-specific configuration.
variables:
  # Make sure output supports UTF-8
  LC_ALL: "C.UTF-8"
  LANG: "C.UTF-8"

# Global default parameters set for all jobs unless overridden by job-specific
# configuration.
default:
  image: python:3.8
  interruptible: true

###############################################################################
# Run Conditions
#
# In the future, this could be broken out into a separate file that we
# `include` here.
#
# REMINDER: The "." prefix causes the "job" to be hidden (does not get run),
# but can still be used for inheritance.

# Run rules to activate at the major junction points: merge requests, tag
# pipelines and branch pipelines for masters.
.run_automatically:
  rules:
    # If changes are make to an active merge request.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
    # If changes are pushed for a tag.
    - if: $CI_COMMIT_TAG
      when: on_success
    # If changes are pushed to the default branch.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: never  # explicit fail-exclude terminal condition.

###############################################################################
# Jobs -- Testing
#
# In the future, `.`-prefixed templates could be broken out into a separate
# file that we `include` here.
#
# REMINDER: The "." prefix causes the "job" to be hidden (does not get run),
# but can still be used for inheritance.

.poetry_install:
  variables:
    # Change pip's cache directory to be inside the project directory since we
    # can only cache local items. Same for poetry cache
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/poetry"
  cache:
    key:
      prefix: default
      files:
        - poetry.lock
    paths:
      - $PIP_CACHE_DIR
      - $POETRY_CACHE_DIR
  before_script:
    - export PATH=${HOME}/.local/bin:${PATH}
    # Will make use of .cache/pip
    - pip install --user -U poetry
    - command -v python
    - python --version
    - command -v pip
    - pip --version
    - command -v poetry
    - poetry -V
    - poetry config --local virtualenvs.in-project true
    # Will make use of .cache/poetry
    - poetry install

.test_defaults:
  extends:
    - .run_automatically
    - .poetry_install
  stage: test
  image: python:3.8
  interruptible: true
  tags:
    - docker

test-lint:
  extends: .test_defaults
  script:
    - poetry run flake8

test-typecheck:
  extends: .test_defaults
  script:
    - poetry run mypy

test-pytest:
  extends: .test_defaults
  parallel:
    matrix:
      - PY_VERSION: [ "3.7", "3.8", "3.9", "3.10", "3.11" ]
  image: python:${PY_VERSION}
  cache:
    key:
      prefix: py${PY_VERSION}
  script:
    - poetry run pytest

#test-notebooks:
#  extends: .test_defaults
#  tags:
#    - gpu
#  parallel:
#    matrix:
#      # Sequences combinatorically combine within a list entry
#      - NOTEBOOK_DIR: "examples/huggingface"
#        NOTEBOOK_FILE: [ "xaitk-huggingface.ipynb" ]
#  # Using default container image defined above
#  script:
#    - nvidia-smi
#    - cd "$NOTEBOOK_DIR"
#    - poetry run papermill \
#        --progress-bar -k python3 --stdout-file - --stderr-file - \
#        "$NOTEBOOK_FILE"
