[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

###############################################################################
[tool.poetry]
name = "xaitk-jatic"
# REMEMBER: `distutils.version.*Version` types can be used to compare versions
# from strings like this.
# This package prefers to use the strict numbering standard when possible.
version = "0.2.0"
description = """\
    Integration package to support interfacing, implementation and example \
    needs for the JATIC."""
authors = ["Kitware, Inc. <xaitk@kitware.com>"]
readme = "README.md"
packages = [{include = "xaitk_jatic", from="src"}]
classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: Unix',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]

[tool.poetry.dependencies]
python = "^3.8.1"
xaitk-saliency = ">=0.8.2"
maite = "^0.6.0"
setuptools = ">=65.6.3"
scipy = [
    {version = "<1.11.1", python = "~3.8.1"}, # Can't satisfy CVE-2023-25399 because it is too restrictive
    {version = ">=1.10.0", python = ">=3.9"}
]
# Python capped to <3.13 because of:
# https://stackoverflow.com/questions/77431252/why-doesnt-poetry-select-the-good-version-of-my-dependency
numpy = [
    {version = ">=1.22,<1.25", python = "~3.8"}, # CVE-2021-34141
    {version = ">=1.22,^1.25", python = ">=3.9,<3.12" }, # CVE-2021-34141
    {version = "^1.26", python = ">=3.12,<3.13" } # numpy==1.26 is the first release supporting python 3.12
]

# Notebook extras support (duplicated in dev group for "always on")
# click = { version = ">=8.0.3", optional = true }
# notebook = { version = ">=7.0.7", optional = true }
# Optionals for "tools" extra"
kwcoco = { version = ">=0.2.18", optional = true}
matplotlib = { version=">=3.4.1", optional = true }
# Optional for Docker container
transformers = {version = "^4.42.3", optional = true}
timm = {version = "^1.0.7", optional = true}
torchvision = {version = ">=0.10.0", optional = true}

[tool.poetry.extras]
tools = [ "kwcoco", "matplotlib" ]
docker = [ "transformers", "timm", "matplotlib", "torchvision" ]

# Linting
[tool.poetry.group.dev-linting]
optional = true

[tool.poetry.group.dev-linting.dependencies]
flake8 = ">=6"
flake8-mutable = ">=1.2.0"
mypy = ">=0.991"
types-Pillow = ">=9.0"
types-setuptools = ">=65.6.0.1"
types-tqdm = ">=4.64"
pre-commit = ">=2.20"
ruff = "^0.1.0"
black = {version = ">=24.3.0", extras=["jupyter"]}


# Docs
[tool.poetry.group.dev-docs]
optional = true

[tool.poetry.group.dev-docs.dependencies]
Sphinx = ">=5.3.0"
sphinx-copybutton = "^0.5.2"
sphinx-rtd-theme = ">=1.1.1"
sphinx-prompt = ">=1.5.0"
livereload = ">=2.6.3"


# Testing
[tool.poetry.group.dev-testing]
optional = true

[tool.poetry.group.dev-testing.dependencies]
coverage = ">=6.5.0"
pytest = ">=7.2.0"
pytest-cov = ">=4.0.0"
# Jupyter notebook testing
notebook = ">=7.0.7"
papermill = ">=2.4.0"
# maite protocol testing
maite = { version = "^0.6.0", extras = ["test"] }


[tool.poetry.scripts]
sal-on-coco-dets = "xaitk_jatic.utils.bin.sal_on_coco_dets:sal_on_coco_dets"

[tool.poetry.plugins."smqtk_plugins"]

###############################################################################
[tool.pytest.ini_options]
addopts = [
    "-lv",                              # Show local in trace-backs.
    "--doctest-modules",                # Increased verbosity.
    "--tb=long",                        # Trace-back print mode.
    "--cov=./src/xaitk_jatic",          # Cover our package specifically
    "--cov=./tests",                    # Also cover our tests for dead spots
    "--cov-report=term",                # Coverage report to terminal
    "--cov-report=xml:coverage.xml",    # for external tool reporting
]
testpaths = [
    "tests",
    "src/xaitk_jatic",
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
]


[tool.black]
# The regular expression pattern must be written as a single line;
# otherwise pytest-black fails to exclude the folders. For details see
# https://github.com/shopkeep/pytest-black/issues/36
exclude = '(/(\.git|.venv|.eggs|docs$)/)'


[tool.ruff]
select = ["E", "W", "F", "I", "D", "A", "B", "N", "YTT", "C4", "PT"]
line-length = 120

ignore = [
    # -- Ignore these rules, since they contradict our coding standards
    "C408",  # JATIC guidelines prefer "list()", rather than "[]", to create an empty list
    "C416",  # JATIC guidelines prefer "dict()", rather than "{}", to create an empty dict
    # -- Ignoring these "Missing Docstring" errors for now, we will fix later
    "D100", "D101", "D102", "D103", "D104", "D105", "D107"
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pycodestyle]
max-doc-length = 120

[tool.ruff.isort]
known-first-party = ["xaitk_jatic"]

[tool.ruff.per-file-ignores]
# Add any files to be ignored here e.g.
# "src/*.py" = ["D100"] # Missing docstring in public module
